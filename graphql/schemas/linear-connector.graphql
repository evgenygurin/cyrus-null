# Note to AI Friends: This is an Apollo Connectors schema. You should use your connectors-spec MCP tool if you have it available before editing this file.

extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.12")
  @link(url: "https://specs.apollo.dev/connect/v0.3", import: ["@source", "@connect"])

# Linear API configuration
directive @source(
  name: "linear_api"
  http: {
    baseURL: "https://api.linear.app"
    headers: [
      { name: "Authorization", value: "{$env.LINEAR_GRAPHQL_API_KEY}" }
      { name: "Content-Type", value: "application/json" }
    ]
  }
) on SCHEMA

# Core Types

type User @connect(
  source: "linear_api"
  http: { POST: "/graphql" }
  selection: """
  data.user {
    id
    name
    email
    displayName
    avatarUrl
    createdAt
    updatedAt
  }
  """
) {
  id: ID!
  name: String!
  email: String!
  displayName: String!
  avatarUrl: String
  createdAt: String!
  updatedAt: String!
}

type Team @connect(
  source: "linear_api"
  http: {
    POST: "/graphql"
    body: """$({
      query: "query($id: String!) { team(id: $id) { id name key description } }",
      variables: { id: $this.id }
    })"""
  }
  selection: """
  data.team {
    id
    name
    key
    description
  }
  """
) {
  id: ID!
  name: String!
  key: String!
  description: String
}

type Issue @connect(
  source: "linear_api"
  http: {
    POST: "/graphql"
    body: """$({
      query: "query($id: String!) { issue(id: $id) { id identifier title description state { id name type } priority priorityLabel assignee { id name email } team { id name key } project { id name } labels { nodes { id name color } } createdAt updatedAt } }",
      variables: { id: $this.id }
    })"""
  }
  selection: """
  data.issue {
    id
    identifier
    title
    description
    state: {
      id: state.id
      name: state.name
      type: state.type
    }
    priority
    priorityLabel
    assignee: assignee? {
      id: id
    }
    team: {
      id: team.id
    }
    project: project? {
      id: id
    }
    labels: labels.nodes {
      id
      name
      color
    }
    createdAt
    updatedAt
  }
  """
) {
  id: ID!
  identifier: String!
  title: String!
  description: String
  state: WorkflowState
  priority: Float
  priorityLabel: String!
  assignee: User
  team: Team
  project: Project
  labels: [IssueLabel!]
  createdAt: String!
  updatedAt: String!
}

type WorkflowState {
  id: ID!
  name: String!
  type: String!
}

type Project {
  id: ID!
  name: String!
}

type IssueLabel {
  id: ID!
  name: String!
  color: String!
}

type Comment @connect(
  source: "linear_api"
  http: {
    POST: "/graphql"
    body: """$({
      query: "query($id: String!) { comment(id: $id) { id body user { id name email } issue { id } createdAt updatedAt } }",
      variables: { id: $this.id }
    })"""
  }
  selection: """
  data.comment {
    id
    body
    user: {
      id: user.id
    }
    issue: {
      id: issue.id
    }
    createdAt
    updatedAt
  }
  """
) {
  id: ID!
  body: String!
  user: User!
  issue: Issue!
  createdAt: String!
  updatedAt: String!
}

# Query Type

type Query {
  # Get current authenticated user
  me: User @connect(
    source: "linear_api"
    http: {
      POST: "/graphql"
      body: """$({
        query: "{ viewer { id name email displayName avatarUrl createdAt updatedAt } }"
      })"""
    }
    selection: """
    data.viewer {
      id
      name
      email
      displayName
      avatarUrl
      createdAt
      updatedAt
    }
    """
  )

  # Get issues assigned to the authenticated user
  myIssues(
    first: Int = 50
    includeArchived: Boolean = false
    filter: IssueFilter
  ): [Issue!] @connect(
    source: "linear_api"
    http: {
      POST: "/graphql"
      body: """$({
        query: "query($first: Int!, $includeArchived: Boolean!) { viewer { assignedIssues(first: $first, includeArchived: $includeArchived) { nodes { id identifier title description state { id name type } priority priorityLabel assignee { id name email } team { id name key } createdAt updatedAt } } } }",
        variables: {
          first: $args.first,
          includeArchived: $args.includeArchived
        }
      })"""
    }
    selection: """
    data.viewer.assignedIssues.nodes {
      id
      identifier
      title
      description
      state: {
        id: state.id
        name: state.name
        type: state.type
      }
      priority
      priorityLabel
      assignee: assignee? {
        id: id
      }
      team: {
        id: team.id
      }
      createdAt
      updatedAt
    }
    """
  )

  # Get a specific issue by ID
  issue(id: ID!): Issue @connect(
    source: "linear_api"
    http: {
      POST: "/graphql"
      body: """$({
        query: "query($id: String!) { issue(id: $id) { id identifier title description state { id name type } priority priorityLabel assignee { id name email } team { id name key } createdAt updatedAt } }",
        variables: { id: $args.id }
      })"""
    }
    selection: """
    data.issue {
      id
      identifier
      title
      description
      state: {
        id: state.id
        name: state.name
        type: state.type
      }
      priority
      priorityLabel
      assignee: assignee? {
        id: id
      }
      team: {
        id: team.id
      }
      createdAt
      updatedAt
    }
    """
  )

  # Get teams
  teams(first: Int = 50): [Team!] @connect(
    source: "linear_api"
    http: {
      POST: "/graphql"
      body: """$({
        query: "query($first: Int!) { teams(first: $first) { nodes { id name key description } } }",
        variables: { first: $args.first }
      })"""
    }
    selection: """
    data.teams.nodes {
      id
      name
      key
      description
    }
    """
  )

  # Get comments for an issue
  issueComments(issueId: ID!, first: Int = 50): [Comment!] @connect(
    source: "linear_api"
    http: {
      POST: "/graphql"
      body: """$({
        query: "query($issueId: String!, $first: Int!) { issue(id: $issueId) { comments(first: $first) { nodes { id body user { id name email } createdAt updatedAt } } } }",
        variables: {
          issueId: $args.issueId,
          first: $args.first
        }
      })"""
    }
    selection: """
    data.issue.comments.nodes {
      id
      body
      user: {
        id: user.id
      }
      issue: {
        id: $args.issueId
      }
      createdAt
      updatedAt
    }
    """
  )
}

# Mutation Type

type Mutation {
  # Create a new issue
  createIssue(input: CreateIssueInput!): Issue @connect(
    source: "linear_api"
    http: {
      POST: "/graphql"
      body: """$({
        query: "mutation($title: String!, $description: String, $teamId: String!, $assigneeId: String, $priority: Int, $projectId: String) { issueCreate(input: { title: $title, description: $description, teamId: $teamId, assigneeId: $assigneeId, priority: $priority, projectId: $projectId }) { success issue { id identifier title description state { id name type } priority priorityLabel assignee { id name email } team { id name key } createdAt updatedAt } } }",
        variables: {
          title: $args.input.title,
          description: $args.input.description,
          teamId: $args.input.teamId,
          assigneeId: $args.input.assigneeId,
          priority: $args.input.priority,
          projectId: $args.input.projectId
        }
      })"""
    }
    selection: """
    data.issueCreate.issue {
      id
      identifier
      title
      description
      state: {
        id: state.id
        name: state.name
        type: state.type
      }
      priority
      priorityLabel
      assignee: assignee? {
        id: id
      }
      team: {
        id: team.id
      }
      createdAt
      updatedAt
    }
    """
  )

  # Add a comment to an issue
  addComment(issueId: ID!, body: String!): Comment @connect(
    source: "linear_api"
    http: {
      POST: "/graphql"
      body: """$({
        query: "mutation($issueId: String!, $body: String!) { commentCreate(input: { issueId: $issueId, body: $body }) { success comment { id body user { id name email } issue { id } createdAt updatedAt } } }",
        variables: {
          issueId: $args.issueId,
          body: $args.body
        }
      })"""
    }
    selection: """
    data.commentCreate.comment {
      id
      body
      user: {
        id: user.id
      }
      issue: {
        id: issue.id
      }
      createdAt
      updatedAt
    }
    """
  )

  # Update issue state
  updateIssueState(issueId: ID!, stateId: ID!): Issue @connect(
    source: "linear_api"
    http: {
      POST: "/graphql"
      body: """$({
        query: "mutation($issueId: String!, $stateId: String!) { issueUpdate(id: $issueId, input: { stateId: $stateId }) { success issue { id identifier title state { id name type } updatedAt } } }",
        variables: {
          issueId: $args.issueId,
          stateId: $args.stateId
        }
      })"""
    }
    selection: """
    data.issueUpdate.issue {
      id
      identifier
      title
      description
      state: {
        id: state.id
        name: state.name
        type: state.type
      }
      priority
      priorityLabel
      assignee: assignee? {
        id: id
      }
      team: {
        id: team.id
      }
      createdAt
      updatedAt
    }
    """
  )
}

# Input Types

input CreateIssueInput {
  title: String!
  description: String
  teamId: ID!
  assigneeId: ID
  priority: Int
  projectId: ID
}

input IssueFilter {
  stateType: String
  teamId: ID
  projectId: ID
}